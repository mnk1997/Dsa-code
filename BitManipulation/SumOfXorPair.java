package in.cdac.pract;

import java.util.ArrayList;
import java.util.Arrays;
//333806710
public class SumOfXorPair {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		//ArrayList<Integer> A=new ArrayList<>(Arrays.asList(28,7,3,6,23,16,5,29,23));
		ArrayList<Integer> A=new ArrayList<>(Arrays.asList(7652,85495,63108,8466,98239,52482,45709,44168,36189,55055,19443,91001,76979,4730,71455,20388,19389,1956,1661,12427,98459,90416,61472,61205,67406,77255,15805,24266,36287,21653,51211,80122,8249,33482,76681,74422,40298,92249,1016,58901,7462,50428,13181,72529,33028,64942,3937,43527,70559,34319,47921,75995,65782,82532,97053,65713,87244,93845,87165,53973,38280,71086,92263,99604,47639,15454,27003,22465,3301,18842,24568,30385,53896,77659,40451,36543,47669,93340,50471,94825,53480,72445,64336,69713,35585,60131,94831,55228,20514,72661,81273,57015,83090,74432,40008,7981,2364,40917,66872,39762,63281,59910,7563,2811,44130,75596,49542,81988,43015,42148,54194,23657,79642,92749,81116,13741,75356,28875,57365,10390,26704,72648,31410,47278,94299,56910,74733,72772,42251,90317,94530,22313,21996,81147,92851,71124,78772,44912,15077,79326,33208,24806,62817,78215,18421,50399,67059,75887,15656,96830,85774,95069,22806,95980,91143,10460,23077,66549,93782,90105,36321,4585,26744,44870,64632,76475,45679,46395,83966,63973,56832,85711,41642,25634,79060,47235,72311,80467,53688,40536,64516,78299,41149,2547,96149,72547,41688,60960,86703,5175,69123,97740,98112,68134,38906,39690,57844,1094,87007,46543,99041,43501,3799,78999,98396,84985,28587,92445,98562,12810,35880,93350,28625,44259,41887,44311,38027,36620,25669,49691,11674,74514,52436,8894,98534,5254,4553,58804,66721,50778,44324,21363,36348,10055,13643,8532,68879,97642,68199,38614,90709,56130,79621,40411,17389,12340,5174,86698,30778,62631,73711,53995,36772,49417,4778,70478,97237,48296,10244,25828,2237,76729,65021,70756,60495,32788,10203,90312,35106,12629,60071,34989,82160,64541,1037,99607,30394,18288,78049,74922,82434,76757,77749,12562,15983,81721,19172,73052,9837,48332,80427,80187,10954,17282,56330,56036,63226,66195,84903,44466,28053,54779,37163,67010,76436,63323,66659,75640,8439,20054,60832,33945,64929,341,51191,687,66874,50308,34114,23336,41100,93138,83326,74935,63367,36309,25259,72146,38942,90980,79727,91826,17128,30843,78867,16502,83135,97594,516,90272,94436,28518,59475,37174,40729,50599,69462,77954,74533,29352,84613,50451,47124,69787,73309,88602,10037,43506,64001,59438,38714,87687,92884,42152,91771,79349,32448,38152,14451,41756,32146,28494,70178,69889,19067,49569,93545,3979,76720,71532,87473,56424,49419,65500,29124,19910,99689,82979,20530,83546,8298,86360,47214,43996,45780,91189,78831,79081,16592,63832,21616,67712,44044,45986,45295,87430,40023,25595,86481,33282,35783,34732,11869,7425,49430,90595,96477,65555,15361,91091,59488,42252,59976,24689,34363,50980,96177,70424,63555,82935,7782,10918,35924,43430,91218,5757,49901,10165,83687,33475,12850,53515,97499,96738,56873,46101,4294,24745,71933,92514,89861,33289,57791,84456,37115,38904,82463,77214,35499,93553,83255,71872,86463,95987,52161,41359,58020,30686,35356,98574,65355,43609,41547,4486,30730,87982,12309,96226,86841,23852,76102,82324,10518,78276,95725,16047,28801,36749,91036,77962,18144,68193,78636,24227,29180,12797,50230,72602,80771,91845,11994,57426,98180,99261,43996,99571,98262,60881,77282,97259,16657,6958,49047,12136,92595,8455,22060,86911,34044,63825,21842,32169,83858,82279,85088,1504,17246,85382,27283,13383,99630,15026,27113,81951,85713,39632,15013,93107,63230,21354,58351,31437,9293,83758,96081,55998,34972,74799,8762,27770,27787,90146,64863,40377,82784,45571,36117,54648,2852,1518,71993,83190,51429,57638,73864,47351,9554,98993,30087,95429,19010,36953,97116,88042,589,34125,67122,50038,43057,2398,48250,24671,26382,70626,96261,76380,31563,67477,83626,55690,71727,95987,72166,30503,86088,7743,18327,56538,21256,24416,47649,69801,23138,46398,65097,31232,76498,169,83900,49777,56018,71091,81545,32655,3014,26033,17635,91282,61553,40381,98432,6550,3101,92247,27164,70747,5304,6431,35671,90246,89233,47549,56979,23199,44703,24122,74359,86514,86522,59620,77774,50638,96800,59310,70473,25032,72402,52557,30681,26297,54996,96988,36022,9532,62704,1849,1691,98417,27828,63398,53223,45245,72783,13225,38237,93704,45624,85164,87845,30973,27527,3613,29705,50061,80762,66799,90745,11468,33874,23832,85447,19187,15059,9809,66060,63196,18599,87225,705,20938,42812,47634,47623,9662,62689,72514,30847,27171,36237,25044,22515,58851,9816,91637,13675,70927,56320,4631,61369,81499,92486,88113,80046,49279,59374,39516,7810,36727,23459,28088,41648,42724,52464,72133,83959,60842,21672,46955,98586,55088,47039,51058,62593,18594,12494,71946,44694,97906,45651,87429,937,60915,94063,90072,99917,63837,98118,64222,99832,39788,3138,45364,87271,72897,38961,70846,82807,18847,5602,72193,6157,94031,8780,83463,35600,64317,12584,29822,9609,86776,68946,17241,66954,15094,93259,34029,59396,32077,44090,63446,46831,4379,93094,78479,88870,49280,5278,18077,68360,76159,95761,4997,43929,17761,22006,86290,88638,27921,27078,59280,50021,56800,27197,73555,15835,31939,10300,27569,63987,50096,43050,3268,98886,76133));
		//ArrayList<Integer> A=new ArrayList<>(Arrays.asList(70888,2417,136,95979,93360,55711,80569,64649,19693,90763,23586,18259,15715,8892,1366,8309,66170,19072,14992,91483,97245,48005,33421,71066,13466,30368,64109,16774,75716,46089,16630,48154,54068,90749,79857,23699,36068,16539,75467,70069,8531,74888,45046,63364,1700,46827,66181,84044,5470,16145,15859,61819,39245,44618,56957,32737,83232,88394,10435,99447,74729,63209,41291,56117,73824,43939,87646,77242,23936,57145,19369,29799,7593,65583,90142,66660,16156,99084,69776,63866,76482,7229,73722,1848,80838,37809,49241,4559,40342,12830,72173,45910,13158,40251,52829,56422,80268,34148,49616,79998,42949,3770,43284,53760,13135,56608,25722,51506,84685,31359,83992,12095,93927,34882,54470,87060,52071,71099,40354,66851,76124,31100,30348,37187,65467,7775,58378,96237,39193,91903,11685,42785,71378,55261,60362,62463,389,19420,18059,94095,91510,38628,67099,76089,10315,88611,48118,80494,39632,98663,81366,87389,57555,96965,17183,59294,64328,14262,69012,89099,22182,73908,35167,24098,75015,2370,27693,46661,46956,91649,80784,68281,49911,11740,12379,21962,87504,80061,78154,63654,95841,245,63383,41278,43194,52888,20102,76552,493,25758,68442,64127,54866,51204,92989,45057,85637,73353,20860,94896,74531,52433,3209,79314,40753,66086,29240,88625,73365,6066,69506,48732,61435,79205,39653,1764,36241,9813,21121,67872,75627,84313,6396,69385,88992,3534,45344,13503,36587,61298,21976,7298,8715,50540,55222,73593,40675,60290,41040,80879,22426,2560,34718,45137,20573,90360,84414,71537,65944,40413,82801,71238,16033,77831,50779,65066,12781,39890,454,7258,85753,37502,39871,68602,7810,3952,38776,847,49197,51600,65349,30946,7616,52554,89823,44612,31655));
       //  int[] arr= {70888,2417,136,95979,93360,55711,80569,64649,19693,90763,23586,18259,15715,8892,1366,8309,66170,19072,14992,91483,97245,48005,33421,71066,13466,30368,64109,16774,75716,46089,16630,48154,54068,90749,79857,23699,36068,16539,75467,70069,8531,74888,45046,63364,1700,46827,66181,84044,5470,16145,15859,61819,39245,44618,56957,32737,83232,88394,10435,99447,74729,63209,41291,56117,73824,43939,87646,77242,23936,57145,19369,29799,7593,65583,90142,66660,16156,99084,69776,63866,76482,7229,73722,1848,80838,37809,49241,4559,40342,12830,72173,45910,13158,40251,52829,56422,80268,34148,49616,79998,42949,3770,43284,53760,13135,56608,25722,51506,84685,31359,83992,12095,93927,34882,54470,87060,52071,71099,40354,66851,76124,31100,30348,37187,65467,7775,58378,96237,39193,91903,11685,42785,71378,55261,60362,62463,389,19420,18059,94095,91510,38628,67099,76089,10315,88611,48118,80494,39632,98663,81366,87389,57555,96965,17183,59294,64328,14262,69012,89099,22182,73908,35167,24098,75015,2370,27693,46661,46956,91649,80784,68281,49911,11740,12379,21962,87504,80061,78154,63654,95841,245,63383,41278,43194,52888,20102,76552,493,25758,68442,64127,54866,51204,92989,45057,85637,73353,20860,94896,74531,52433,3209,79314,40753,66086,29240,88625,73365,6066,69506,48732,61435,79205,39653,1764,36241,9813,21121,67872,75627,84313,6396,69385,88992,3534,45344,13503,36587,61298,21976,7298,8715,50540,55222,73593,40675,60290,41040,80879,22426,2560,34718,45137,20573,90360,84414,71537,65944,40413,82801,71238,16033,77831,50779,65066,12781,39890,454,7258,85753,37502,39871,68602,7810,3952,38776,847,49197,51600,65349,30946,7616,52554,89823,44612,31655};
		int[] arr= {7652,85495,63108,8466,98239,52482,45709,44168,36189,55055,19443,91001,76979,4730,71455,20388,19389,1956,1661,12427,98459,90416,61472,61205,67406,77255,15805,24266,36287,21653,51211,80122,8249,33482,76681,74422,40298,92249,1016,58901,7462,50428,13181,72529,33028,64942,3937,43527,70559,34319,47921,75995,65782,82532,97053,65713,87244,93845,87165,53973,38280,71086,92263,99604,47639,15454,27003,22465,3301,18842,24568,30385,53896,77659,40451,36543,47669,93340,50471,94825,53480,72445,64336,69713,35585,60131,94831,55228,20514,72661,81273,57015,83090,74432,40008,7981,2364,40917,66872,39762,63281,59910,7563,2811,44130,75596,49542,81988,43015,42148,54194,23657,79642,92749,81116,13741,75356,28875,57365,10390,26704,72648,31410,47278,94299,56910,74733,72772,42251,90317,94530,22313,21996,81147,92851,71124,78772,44912,15077,79326,33208,24806,62817,78215,18421,50399,67059,75887,15656,96830,85774,95069,22806,95980,91143,10460,23077,66549,93782,90105,36321,4585,26744,44870,64632,76475,45679,46395,83966,63973,56832,85711,41642,25634,79060,47235,72311,80467,53688,40536,64516,78299,41149,2547,96149,72547,41688,60960,86703,5175,69123,97740,98112,68134,38906,39690,57844,1094,87007,46543,99041,43501,3799,78999,98396,84985,28587,92445,98562,12810,35880,93350,28625,44259,41887,44311,38027,36620,25669,49691,11674,74514,52436,8894,98534,5254,4553,58804,66721,50778,44324,21363,36348,10055,13643,8532,68879,97642,68199,38614,90709,56130,79621,40411,17389,12340,5174,86698,30778,62631,73711,53995,36772,49417,4778,70478,97237,48296,10244,25828,2237,76729,65021,70756,60495,32788,10203,90312,35106,12629,60071,34989,82160,64541,1037,99607,30394,18288,78049,74922,82434,76757,77749,12562,15983,81721,19172,73052,9837,48332,80427,80187,10954,17282,56330,56036,63226,66195,84903,44466,28053,54779,37163,67010,76436,63323,66659,75640,8439,20054,60832,33945,64929,341,51191,687,66874,50308,34114,23336,41100,93138,83326,74935,63367,36309,25259,72146,38942,90980,79727,91826,17128,30843,78867,16502,83135,97594,516,90272,94436,28518,59475,37174,40729,50599,69462,77954,74533,29352,84613,50451,47124,69787,73309,88602,10037,43506,64001,59438,38714,87687,92884,42152,91771,79349,32448,38152,14451,41756,32146,28494,70178,69889,19067,49569,93545,3979,76720,71532,87473,56424,49419,65500,29124,19910,99689,82979,20530,83546,8298,86360,47214,43996,45780,91189,78831,79081,16592,63832,21616,67712,44044,45986,45295,87430,40023,25595,86481,33282,35783,34732,11869,7425,49430,90595,96477,65555,15361,91091,59488,42252,59976,24689,34363,50980,96177,70424,63555,82935,7782,10918,35924,43430,91218,5757,49901,10165,83687,33475,12850,53515,97499,96738,56873,46101,4294,24745,71933,92514,89861,33289,57791,84456,37115,38904,82463,77214,35499,93553,83255,71872,86463,95987,52161,41359,58020,30686,35356,98574,65355,43609,41547,4486,30730,87982,12309,96226,86841,23852,76102,82324,10518,78276,95725,16047,28801,36749,91036,77962,18144,68193,78636,24227,29180,12797,50230,72602,80771,91845,11994,57426,98180,99261,43996,99571,98262,60881,77282,97259,16657,6958,49047,12136,92595,8455,22060,86911,34044,63825,21842,32169,83858,82279,85088,1504,17246,85382,27283,13383,99630,15026,27113,81951,85713,39632,15013,93107,63230,21354,58351,31437,9293,83758,96081,55998,34972,74799,8762,27770,27787,90146,64863,40377,82784,45571,36117,54648,2852,1518,71993,83190,51429,57638,73864,47351,9554,98993,30087,95429,19010,36953,97116,88042,589,34125,67122,50038,43057,2398,48250,24671,26382,70626,96261,76380,31563,67477,83626,55690,71727,95987,72166,30503,86088,7743,18327,56538,21256,24416,47649,69801,23138,46398,65097,31232,76498,169,83900,49777,56018,71091,81545,32655,3014,26033,17635,91282,61553,40381,98432,6550,3101,92247,27164,70747,5304,6431,35671,90246,89233,47549,56979,23199,44703,24122,74359,86514,86522,59620,77774,50638,96800,59310,70473,25032,72402,52557,30681,26297,54996,96988,36022,9532,62704,1849,1691,98417,27828,63398,53223,45245,72783,13225,38237,93704,45624,85164,87845,30973,27527,3613,29705,50061,80762,66799,90745,11468,33874,23832,85447,19187,15059,9809,66060,63196,18599,87225,705,20938,42812,47634,47623,9662,62689,72514,30847,27171,36237,25044,22515,58851,9816,91637,13675,70927,56320,4631,61369,81499,92486,88113,80046,49279,59374,39516,7810,36727,23459,28088,41648,42724,52464,72133,83959,60842,21672,46955,98586,55088,47039,51058,62593,18594,12494,71946,44694,97906,45651,87429,937,60915,94063,90072,99917,63837,98118,64222,99832,39788,3138,45364,87271,72897,38961,70846,82807,18847,5602,72193,6157,94031,8780,83463,35600,64317,12584,29822,9609,86776,68946,17241,66954,15094,93259,34029,59396,32077,44090,63446,46831,4379,93094,78479,88870,49280,5278,18077,68360,76159,95761,4997,43929,17761,22006,86290,88638,27921,27078,59280,50021,56800,27197,73555,15835,31939,10300,27569,63987,50096,43050,3268,98886,76133};
		//System.out.println("firsr"+sumXOR(arr,arr.length));
		//System.out.println(solveOne(A));
		solveTwo();
	}
	 public static int solve(ArrayList<Integer> A) {
		 System.out.println("size"+A.size());
	        int n=A.size();
	        int totalSum=0;
	        int[] count=new int[32];
	        for(int i=0;i<=31;i++)
	        {
	            for(int ele:A)
	            {
	                count[i]+=(ele & (1<<(i)))>=1?1:0;
	            }
	        }
            for(int i=0;i<=31;i++)
            {
            	System.out.print(count[i]+" ");
            }
            System.out.println();
	        for(int i=0;i<n;i++)
	        {
	        	System.out.println("*****************for i"+A.get(i));
	        	for(int bit=0;bit<=31;bit++)
	        		
	        	{
	        		if(totalSum==333806710)
	        		{
	        			System.out.println("Result found"+bit+"     "+i);
	        			return totalSum;
	        		}
	        	 	  if((A.get(i) & (1<<bit)) >=1)
	        	 	  {
	        	 		  //System.out.println("yes bit is set"+bit);
	        	 		  totalSum+=(n-count[bit])*((1<<bit)%(Math.pow(10,9)+7));
	        	 		  System.out.println("total Sum"+totalSum);
	        	 	  }
	        	 	  else
	        	 	  {
	        	 		// System.out.println("no bit is set"+bit);
	        	 		  totalSum+=count[bit]*((1<<bit)%(Math.pow(10,9)+7));
	        	 		// System.out.println("total Sum"+totalSum);
	        	 	  }
	        	}
	        }
     System.out.println(totalSum%(Math.pow(10,9)+7));
     System.out.println("+1"+(totalSum+1));
     
	        return totalSum/n;
	    }
	 public static int solveOne(ArrayList<Integer> A) {
		 ArrayList<Integer> list=new ArrayList<>(Arrays.asList(1931,1033,4179,8117,7364,7737,6219,3439,1537,7993));
			 
		 System.out.println("size"+A.size());
	        int n=A.size();
	        long totalSum=0;
	        int[] count=new int[32];
	        for(int i=0;i<=31;i++)
	        {
	            for(int ele:A)
	            {
	                count[i]+=(ele & (1<<(i)))>=1?1:0;
	            }
	        }
            for(int i=0;i<=31;i++)
            {
            	System.out.print(count[i]+" ");
            }
            System.out.println();
	        
	        	//System.out.println("*****************for i"+A.get(i));
	        	for(int bit=0;bit<=31;bit++)
	        		
	        	{
	        		
	        		

	        	 		  //System.out.println("yes bit is set"+bit);
	        	 		  totalSum+=((long)n-count[bit])*count[bit]*(1<<bit);
	        	 		  System.out.println("total Sum"+totalSum);
	        	 		 // totalSum=(totalSum%(Math.pow(10,9)+7));
	        	 	  
	        	}
	        
    // System.out.println(totalSum%(Math.pow(10,9)+7));
     System.out.println("+1"+(totalSum+1));
     
	        return (int) (totalSum%1000000007);
	    }
	 public  static long sumXOR(int arr[], int n)
	    {
	        long sum = 0;
	        for (int i = 0; i < 32; i++) 
	        {
	            // Count of zeros and ones
	            int zc = 0, oc = 0; 
	             
	            // Individual sum at each bit position
	            long idsum = 0; 
	             
	            for (int j = 0; j < n; j++)
	            {
	                if (arr[j] % 2 == 0)
	                    zc++;
	                     
	                else
	                    oc++;
	                arr[j] /= 2;
	            }
	             
	            // calculating individual bit sum 
	            idsum = ((long)oc) * zc * (1 << i) %1000000007; 
	     
	            // final sum 
	            sum += idsum; 
	        }
	        return (long) (sum%(Math.pow(10,9)+7));
	    }
	 public static void solveTwo()
	 {
		 ArrayList<Integer> list=new ArrayList<>(Arrays.asList(1931,1033,4179,8117,7364,7737,6219,3439,1537,7993));
		 int count=0;
		 for(int i:list)
		 { 
			 if((i & 1<<7 )>=1)
			 {
				 count++;
			 }
			 
		 }
		 System.out.println("count "+count);
	 }

}
